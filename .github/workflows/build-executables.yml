name: Build Cross-Platform Executables

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggers

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            extension: .exe
            artifact_name: ExcelProductExtractor-Windows
          - os: macos-latest
            platform: macos
            extension: ""
            artifact_name: ExcelProductExtractor-macOS
          - os: ubuntu-latest
            platform: linux
            extension: ""
            artifact_name: ExcelProductExtractor-Linux

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Debug - List repository contents (Windows)
      if: matrix.platform == 'windows'
      run: |
        Write-Host "=== Repository Root ==="
        Get-ChildItem -Force | Format-Table Name, Length, LastWriteTime
        Write-Host "=== Key Files Check ==="
        Write-Host "requirements.txt exists: $(if (Test-Path requirements.txt) { 'YES' } else { 'NO' })"
        Write-Host "excel_processor.spec exists: $(if (Test-Path excel_processor.spec) { 'YES' } else { 'NO' })"
        Write-Host "start_app.py exists: $(if (Test-Path start_app.py) { 'YES' } else { 'NO' })"
        Write-Host "=== Working Directory ==="
        Get-Location
      shell: pwsh

    - name: Debug - List repository contents (Unix)
      if: matrix.platform != 'windows'
      run: |
        echo "=== Repository Root ==="
        ls -la
        echo "=== Key Files Check ==="
        echo "requirements.txt exists: $(test -f requirements.txt && echo 'YES' || echo 'NO')"
        echo "excel_processor.spec exists: $(test -f excel_processor.spec && echo 'YES' || echo 'NO')"
        echo "start_app.py exists: $(test -f start_app.py && echo 'YES' || echo 'NO')"
        echo "=== Working Directory ==="
        pwd
      shell: bash

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        # Remove cache for now to avoid path issues
        # cache: 'pip'

    - name: Install system dependencies (Ubuntu)
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        # Install packages one by one for better error reporting
        sudo apt-get install -y python3-tk || echo "python3-tk installation failed"
        sudo apt-get install -y python3-dev || echo "python3-dev installation failed"
        sudo apt-get install -y tk-dev || echo "tk-dev installation failed"
        sudo apt-get install -y tcl-dev || echo "tcl-dev installation failed"
        sudo apt-get install -y libffi-dev || echo "libffi-dev installation failed"
        sudo apt-get install -y libssl-dev || echo "libssl-dev installation failed"
        sudo apt-get install -y libbz2-dev || echo "libbz2-dev installation failed"
        sudo apt-get install -y libreadline-dev || echo "libreadline-dev installation failed"
        sudo apt-get install -y libsqlite3-dev || echo "libsqlite3-dev installation failed"
        sudo apt-get install -y libncurses-dev || echo "libncurses-dev installation failed"
        sudo apt-get install -y xz-utils || echo "xz-utils installation failed"
        sudo apt-get install -y liblzma-dev || echo "liblzma-dev installation failed"
        sudo apt-get install -y build-essential || echo "build-essential installation failed"
        sudo apt-get install -y pkg-config || echo "pkg-config installation failed"
        echo "System dependencies installation completed"

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        # Check if requirements.txt exists before installing
        if [ -f "requirements.txt" ]; then
          echo "Installing from requirements.txt"
          pip install -r requirements.txt
        else
          echo "requirements.txt not found, installing basic dependencies"
          pip install customtkinter openpyxl pandas aiohttp beautifulsoup4 requests pyyaml structlog colorama
        fi
        
        # Ensure tkinter is available for GUI applications
        python -c "import tkinter; print('✅ tkinter available')" || echo "⚠️ tkinter not available - GUI may not work"
      shell: bash

    - name: Create application directories
      run: |
        mkdir -p cache/scraping/data
        mkdir -p logs
        mkdir -p output

    - name: Build executable with PyInstaller
      run: |
        pyinstaller --clean excel_processor.spec

    - name: Verify build output (Windows)
      if: matrix.platform == 'windows'
      run: |
        if (Test-Path "dist\ExcelProductExtractor.exe") {
          $size = [math]::Round((Get-Item "dist\ExcelProductExtractor.exe").Length / 1MB, 1)
          Write-Host "✅ Windows executable created: $size MB"
          Get-Item "dist\ExcelProductExtractor.exe" | Select-Object Name, Length, LastWriteTime
        } elseif (Test-Path "dist\ExcelProductExtractor") {
          $size = [math]::Round((Get-Item "dist\ExcelProductExtractor").Length / 1MB, 1)
          Write-Host "✅ Windows executable created: $size MB"
          Get-Item "dist\ExcelProductExtractor" | Select-Object Name, Length, LastWriteTime
        } else {
          Write-Host "❌ No executable found in dist directory"
          Write-Host "Contents of dist directory:"
          if (Test-Path "dist") {
            Get-ChildItem "dist" -Recurse -Force | Select-Object Name, FullName, Length
          } else {
            Write-Host "dist directory does not exist"
          }
          exit 1
        }
      shell: pwsh

    - name: Verify build output (macOS/Linux)
      if: matrix.platform != 'windows'
      run: |
        if [ -f "dist/ExcelProductExtractor" ]; then
          size=$(stat -f%z "dist/ExcelProductExtractor" 2>/dev/null || stat -c%s "dist/ExcelProductExtractor")
          size_mb=$((size / 1024 / 1024))
          echo "✅ ${{ matrix.platform }} executable created: ${size_mb} MB"
          ls -la "dist/ExcelProductExtractor"
        else
          echo "❌ No executable found"
          ls -la dist/
          exit 1
        fi

    - name: Rename executable for Windows
      if: matrix.platform == 'windows'
      run: |
        if (Test-Path "dist\ExcelProductExtractor") {
          Write-Host "Renaming ExcelProductExtractor to ExcelProductExtractor.exe"
          Move-Item "dist\ExcelProductExtractor" "dist\ExcelProductExtractor.exe" -Force
          Write-Host "Renamed successfully"
        } else {
          Write-Host "ExcelProductExtractor not found for renaming"
        }
      shell: pwsh

    - name: Create distribution package (Windows)
      if: matrix.platform == 'windows'
      run: |
        New-Item -ItemType Directory -Path "release" -Force
        
        # Copy main executable
        if (Test-Path "dist\ExcelProductExtractor.exe") {
          Copy-Item "dist\ExcelProductExtractor.exe" "release\" -Force
          Write-Host "Copied ExcelProductExtractor.exe"
        } elseif (Test-Path "dist\ExcelProductExtractor") {
          Copy-Item "dist\ExcelProductExtractor" "release\ExcelProductExtractor.exe" -Force
          Write-Host "Copied and renamed ExcelProductExtractor to .exe"
        }
        
        # Copy configuration and documentation
        if (Test-Path "config") { Copy-Item "config" "release\" -Recurse -Force }
        if (Test-Path "README.md") { Copy-Item "README.md" "release\" -Force }
        if (Test-Path "BUILD_EXECUTABLE_README.md") { Copy-Item "BUILD_EXECUTABLE_README.md" "release\" -Force }
        
        # Create usage instructions
        $content = "Excel Product Data Extractor - Executable Version`n"
        $content += "=================================================`n`n"
        $content += "QUICK START:`n"
        $content += "1. Double-click ExcelProductExtractor${{ matrix.extension }} to run`n"
        $content += "2. Select your Excel file with product hyperlinks`n"
        $content += "3. Wait for processing to complete`n"
        $content += "4. Open the generated output file`n`n"
        $content += "REQUIREMENTS:`n"
        $content += "- None! All dependencies are included`n`n"
        $content += "PLATFORM:`n"
        $content += "- Built for: ${{ matrix.platform }}`n"
        $content += "- Built on: $(Get-Date)`n`n"
        $content += "SUPPORT:`n"
        $content += "- See README.md for detailed instructions`n"
        $content += "- See BUILD_EXECUTABLE_README.md for build information`n"
        Set-Content -Path "release\HOW_TO_USE.txt" -Value $content
      shell: pwsh

    - name: Create distribution package (Unix)
      if: matrix.platform != 'windows'
      run: |
        mkdir -p release
        
        # Copy main executable
        cp "dist/ExcelProductExtractor" "release/"
        
        # Copy configuration and documentation
        cp -r config release/ 2>/dev/null || true
        cp README.md release/ 2>/dev/null || true
        cp BUILD_EXECUTABLE_README.md release/ 2>/dev/null || true
        
        # Create usage instructions
        echo "Excel Product Data Extractor - Executable Version" > release/HOW_TO_USE.txt
        echo "=================================================" >> release/HOW_TO_USE.txt
        echo "" >> release/HOW_TO_USE.txt
        echo "QUICK START:" >> release/HOW_TO_USE.txt
        echo "1. Double-click ExcelProductExtractor${{ matrix.extension }} to run" >> release/HOW_TO_USE.txt
        echo "2. Select your Excel file with product hyperlinks" >> release/HOW_TO_USE.txt
        echo "3. Wait for processing to complete" >> release/HOW_TO_USE.txt
        echo "4. Open the generated output file" >> release/HOW_TO_USE.txt
        echo "" >> release/HOW_TO_USE.txt
        echo "REQUIREMENTS:" >> release/HOW_TO_USE.txt
        echo "- None! All dependencies are included" >> release/HOW_TO_USE.txt
        echo "" >> release/HOW_TO_USE.txt
        echo "PLATFORM:" >> release/HOW_TO_USE.txt
        echo "- Built for: ${{ matrix.platform }}" >> release/HOW_TO_USE.txt
        echo "- Built on: $(date)" >> release/HOW_TO_USE.txt
        echo "" >> release/HOW_TO_USE.txt
        echo "SUPPORT:" >> release/HOW_TO_USE.txt
        echo "- See README.md for detailed instructions" >> release/HOW_TO_USE.txt
        echo "- See BUILD_EXECUTABLE_README.md for build information" >> release/HOW_TO_USE.txt
      shell: bash

    - name: Upload executable artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: release/
        retention-days: 30

    - name: Create release zip
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        cd release
        if [ "${{ matrix.platform }}" = "windows" ]; then
          powershell -Command "Compress-Archive -Path * -DestinationPath ../${{ matrix.artifact_name }}.zip"
        else
          zip -r ../${{ matrix.artifact_name }}.zip .
        fi
      shell: bash

  # Create GitHub Release when a tag is pushed
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create release zips
      run: |
        for dir in ExcelProductExtractor-*; do
          if [ -d "$dir" ]; then
            cd "$dir"
            zip -r "../${dir}.zip" .
            cd ..
          fi
        done
        ls -la *.zip

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Excel Product Extractor ${{ github.ref_name }}
        body: |
          ## 🚀 Excel Product Data Extractor - Release ${{ github.ref_name }}
          
          ### 📦 Available Downloads:
          
          - **Windows**: `ExcelProductExtractor-Windows.zip` - Contains `.exe` file
          - **macOS**: `ExcelProductExtractor-macOS.zip` - Contains executable for Mac
          - **Linux**: `ExcelProductExtractor-Linux.zip` - Contains executable for Linux
          
          ### 🎯 How to Use:
          
          1. Download the appropriate zip file for your operating system
          2. Extract the zip file
          3. Double-click the executable to run
          4. No Python installation required!
          
          ### ✨ Features:
          
          - Modern GUI interface using CustomTkinter
          - Processes Excel files with ABB product hyperlinks
          - Extracts product data: EAN Code, RAL Number, Dimensions, Weight
          - Creates clean output Excel with only extracted data
          - Concurrent web scraping with optimized performance
          
          ### 🔧 What's Included:
          
          Each download contains:
          - The main executable (no Python required)
          - Configuration files
          - Documentation and usage instructions
          - All dependencies bundled
        files: |
          ExcelProductExtractor-Windows.zip
          ExcelProductExtractor-macOS.zip
          ExcelProductExtractor-Linux.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build summary
  summary:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Build Summary
      run: |
        echo "## 🏗️ Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Platform | Status | Artifact |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|--------|----------|" >> $GITHUB_STEP_SUMMARY
        echo "| Windows  | ${{ needs.build.result }} | ExcelProductExtractor-Windows |" >> $GITHUB_STEP_SUMMARY
        echo "| macOS    | ${{ needs.build.result }} | ExcelProductExtractor-macOS |" >> $GITHUB_STEP_SUMMARY
        echo "| Linux    | ${{ needs.build.result }} | ExcelProductExtractor-Linux |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Download artifacts from the Actions tab" >> $GITHUB_STEP_SUMMARY
        echo "2. Test executables on target platforms" >> $GITHUB_STEP_SUMMARY
        echo "3. Create a release tag to trigger automatic releases" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ startsWith(github.ref, 'refs/tags/') }}" = "true" ]; then
          echo "🎉 **Release created!** Check the Releases page for downloads." >> $GITHUB_STEP_SUMMARY
        else
          echo "💡 **Tip:** Push a tag (e.g., \`git tag v1.0.0 && git push origin v1.0.0\`) to create a release!" >> $GITHUB_STEP_SUMMARY
        fi